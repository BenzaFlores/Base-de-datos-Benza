# Sentencias DDL Ejercicios

## Ejercicio 1: Usuarios y Direcciones (Relación Uno a Uno 1:1)

Cada empleado tiene una sola tarjeta de identificación.

1.  Crea una base de datos llamada usuarios\_db con utf8mb4\_unicode\_ci.

    ```sql
    -- Crear la base de datos
    CREATE DATABASE usuarios_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    ```
2.  Modifica la base de datos usuarios\_db para cambiar su collation a utf8mb4\_general\_ci.

    ```sql
    -- Modificar la collation de la base de datos
    ALTER DATABASE usuarios_db COLLATE utf8mb4_general_ci;
    ```
3.  Usa la base de datos.

    ```sql
    USE usuarios_db;
    ```
4.  Crea una tabla usuarios con los siguientes campos.

    ```sql
    -- Crear la tabla usuarios
    CREATE TABLE usuarios (
        id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
        nombre VARCHAR(100) NOT NULL
    );
    ```

    | #   | id   | nombre   |
    | :-- | :--- | :------- |
    |     |      |          |

5.  Crea una tabla direcciones donde cada usuario tiene una única dirección, con los campos:

    ```sql
    -- Crear la tabla direcciones
    CREATE TABLE direcciones (
        id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
        usuario_id INT UNSIGNED UNIQUE,
        direccion VARCHAR(255) NOT NULL,
        FOREIGN KEY (usuario_id) REFERENCES usuarios (id)
    );
    ```

    | SCHEMAS   |
    | :-------- |
    | > sys     |
    | usuarios\_db |
    |           |
    | Tables    |
    | > direcciones |
    | > usuarios    |
    | Views     |
    |           |
    | Stored Procedures |

6.  Modifica la tabla direcciones para cambiar la clave primaria y hacer que usuario\_id sea clave primaria y clave foránea a la vez.

    ```sql
    -- Modificar la clave primaria de la tabla direcciones
    ALTER TABLE direcciones DROP PRIMARY KEY, ADD PRIMARY KEY (usuario_id), ADD CONSTRAINT fk_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(id);
    ```
7.  Cambia el tamaño del campo nombre en la tabla usuarios a 150 caracteres.

    ```sql
    -- Modificar la longitud del campo nombre
    ALTER TABLE usuarios MODIFY nombre VARCHAR(150) NOT NULL;
    ```
8.  Agrega una nueva columna telefono de tipo VARCHAR(15) después del campo nombre en usuarios.

    ```sql
    -- Agregar la columna telefono
    ALTER TABLE usuarios ADD COLUMN telefono VARCHAR(15) AFTER nombre;
    ```
9.  Cambia el tipo de dato de telefono en usuarios para que sea BIGINT.

    ```sql
    -- Cambiar el tipo de telefono a BIGINT
    ALTER TABLE usuarios MODIFY COLUMN telefono BIGINT;
    ```
10. Elimina la columna telefono de la tabla usuarios.

    ```sql
    -- Eliminar la columna telefono
    ALTER TABLE usuarios DROP COLUMN telefono;
    ```
11. Inserta un usuario llamado "Juan Pérez".
12. Inserta una dirección "Calle Mayor 123" para el usuario "Juan Pérez".
13. Inserta dos usuarios adicionales ("Ana Gómez" y "Carlos Ruiz").
14. Añade direcciones para los nuevos usuarios.

    ```sql
    -- Insertar usuarios y direcciones
    INSERT INTO Usuarios (nombre) VALUES ('Juan Pérez');
    INSERT INTO direcciones (usuario_id, direccion) VALUES (1, 'Calle Mayor 123');
    INSERT INTO usuarios (nombre) VALUES ('Ana Gómez'), ('Carlos Ruiz');
    INSERT INTO direcciones (usuario_id, direccion) VALUES (2, 'Avenida Libertad 456'), (3, 'Calle Sol 789');
    ```
15. Consulta todas las direcciones junto con el nombre del usuario.

    ```sql
    -- Consultar direcciones con nombres de usuarios
    SELECT usuarios.nombre, direcciones.direccion FROM usuarios LEFT JOIN direcciones ON usuarios.id = direcciones.usuario_id;
    ```

    | #   | nombre     | direccion           |
    | :-- | :--------- | :------------------ |
    | 1   | Juan Pérez | Calle Mayor 123     |
    | 2   | Ana Gómez  | Avenida Libertad 456 |
    | 3   | Carlos Ruiz | Calle Sol 789        |

16. Muestra todos los usuarios que no tienen dirección registrada.

    ```sql
    -- Mostrar usuarios sin dirección
    SELECT * FROM usuarios WHERE id NOT IN (SELECT usuario_id FROM direcciones);
    ```

    | #   | id   | nombre   |
    | :-- | :--- | :------- |
    |     |      |          |

17. Actualiza la dirección de "Juan Pérez" a "Avenida Central 456".

    ```sql
    -- Actualizar la dirección de Juan Pérez
    UPDATE direcciones SET direccion = 'Avenida Central 456' WHERE usuario_id = 1;
    ```

    | Result   | Grid   | Filter Rows   |
    | :------- | :----- | :------------ |
    | Edit     | Export/Import:   | Wrap Cell Content:   |
    | #   | id   | usuario_id   | direccion             |
    | 1   | 1   | 1            | Avenida Central 456     |
    | 2   | 2   | 2            | Avenida Libertad 456     |
    | 3   | 3   | 3            | Calle Sol 789           |

18. Elimina la dirección de "Carlos Ruiz".

    ```sql
    -- Eliminar la dirección de Carlos Ruiz
    DELETE FROM direcciones WHERE usuario_id = 3;
    ```

    | Result   | Grid   | Filter Rows:   |
    | :------- | :----- | :------------- |
    | #   | id   | usuario_id   | direccion             |
    | 1   | 1   | 1            | Avenida Central 456     |
    | 2   | 2   | 2            | Avenida Libertad 456     |
    | NULL   | NULL   | NULL         | NULL                |

19. Consulta la estructura de la tabla direcciones.

    ```sql
    -- Consultar la estructura de direcciones
    DESCRIBE TABLE direcciones;
    ```

    | Field   | Type   | Null   | Key   | Default   | Extra   |
    | :------ | :----- | :----- | :---- | :-------- | :------ |
    | id      | int(10) unsigned | NO   | PRI   | auto_increment |          |
    | usuario_id | int(10) unsigned | NO   | UNI   |          |          |
    | direccion | varchar(255) | NO   |     |          |          |

    | select_type   | table      | type   | possible_keys   | key   | key_len   | ref   | rows   | filtered   | Extra   |
    | :------------ | :--------- | :----- | :-------------- | :---- | :-------- | :----- | :----- | :--------- | :------ |
    | SIMPLE        | direcciones | ALL    | NULL           | NULL   | NULL     | NULL   | 1      | 100.00     |          |

20. Elimina las tablas direcciones y usuarios.

    ```sql
    -- Eliminar tablas
    DROP TABLE direcciones;
    DROP TABLE usuarios;
    ```
21. Elimina la base de datos usuarios\_db.

    ```sql
    -- Eliminar base de datos
    DROP DATABASE usuarios_db;
    ```

## Ejemplo 2: Gestión de Clientes y Pedidos (Relación Uno a Muchos - 1:N)

Cada paciente tiene una única historia clínica.

1.  Crea una base de datos llamada hospital con utf8mb4\_unicode\_ci.

    ```sql
    -- Crear la base de datos
    CREATE DATABASE hospital CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    ```

    | SCHEMAS   |
    | :-------- |
    | > hospital |
    | > sys     |

2.  Modifica la base de datos hospital para cambiar su collation a utf8mb4\_general\_ci.

    ```sql
    -- Modificar la collation de la base de datos
    ALTER DATABASE hospital COLLATE utf8mb4_general_ci;
    ```
3.  Usa la base de datos.

    ```sql
    -- Usar la base de datos
    USE hospital;
    ```
4.  Crea una tabla pacientes con los siguientes campos:

    ```sql
    -- Crear la tabla pacientes
    CREATE TABLE pacientes (
        id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
        nombre VARCHAR(100) NOT NULL
    );
    ```

    | Result   | Grid   | Filter Rows:   |
    | :------- | :----- | :------------- |
    | Edit:   | Export   |                |
    | #   | id   | nombre   |
    | NULL   | NULL   | NULL     |

5.  Crea una tabla historias\_clinicas donde cada paciente tiene una única historia clínica, con los campos:

    ```sql
    -- Crear la tabla historias_clinicas
    CREATE TABLE historias_clinicas (
        paciente_id INT UNSIGNED PRIMARY KEY,
        diagnostico TEXT NOT NULL,
        fecha_registro DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (paciente_id) REFERENCES pacientes (id)
    );
    ```

    | Result   | Grid   | Filter Rows:   |
    | :------- | :----- | :------------- |
    | #   | paciente_id   | diagnostico   | fecha_registro   |
    | NULL   | NULL        | NULL        | NULL             |

6.  Modifica la tabla historias\_clinicas agregando una columna tratamiento de tipo TEXT.

    ```sql
    -- Modificar la tabla historias clinicas agregando una columna tratamiento
    ALTER TABLE historias_clinicas ADD COLUMN tratamiento TEXT;
    ```

    | Result   | Grid   | Filter Rows:   |
    | :------- | :----- | :------------- |
    | #   | paciente_id   | diagnostico   | fecha_registro   | tratamiento   |
    | NULL   | NULL        | NULL        | NULL            |

7.  Cambia el tamaño del campo nombre en la tabla pacientes a 150 caracteres.

    ```sql
    -- Modificar la longitud del campo nombre
    ALTER TABLE pacientes MODIFY nombre VARCHAR(150) NOT NULL;
    ```
8.  Agrega una nueva columna telefono de tipo VARCHAR(15) después del campo nombre en pacientes.

    ```sql
    -- Agregar la columna telefono
    ALTER TABLE pacientes ADD COLUMN telefono VARCHAR(15) AFTER nombre;
    ```

    | Result   | Grid   | Filter Rows:   |
    | :------- | :----- | :------------- |
    | Edit:   | Export/Import:   | Wrap Cell Content:   |
    | #   | id   | nombre   | telefono   |
    | NULL   | NULL   | NULL     |

9.  Elimina la columna telefono de la tabla pacientes.

    ```sql
    -- Eliminar la columna telefono
    ALTER TABLE pacientes DROP COLUMN telefono;
    ```

    | Result   | Grid   | Filter Rows:   |
    | :------- | :----- | :------------- |
    | #   | id   | nombre   |
    | NULL   | NULL   | NULL     |

10. Inserta un paciente llamado "Juan Pérez".
11. Inserta una historia clínica con diagnóstico "Hipertensión" para el paciente "Juan Pérez".
12. Inserta dos pacientes adicionales ("Ana Gómez" y "Carlos Ruiz").
13. Añade historias clínicas para los nuevos pacientes.

    ```sql
    -- Insertar pacientes e historias clínicas
    INSERT INTO pacientes (nombre) VALUES ('Juan Pérez');
    INSERT INTO historias_clinicas (paciente_id, diagnostico) VALUES (1, 'Hipertensión');
    INSERT INTO pacientes (nombre) VALUES ('Ana Gómez'), ('Carlos Ruiz');
    INSERT INTO historias_clinicas (paciente_id, diagnostico) VALUES (2, 'Diabetes'), (3, 'Asma');
    ```

    | Result   | Grid   | Filter Rows:   |
    | :------- | :----- | :------------- |
    | paciente_id   | diagnostico   | fecha_registro   | tratamiento   |
    | 1   | Hipertensión   | 2025-03-12 19:13:21   | NULL   |
    | 2   | Diabetes   | 2025-03-12 19:13:21   | NULL   |
    | 3   | Asma   | 2025-03-12 19:13:21   | NULL   |
    | NULL   | NULL   | NULL   | NULL   |

    | Result   | Grid   | Filter Rows:   |
    | :------- | :----- | :------------- |
    | #   | id   | nombre   |
    | 1   | 1   | Juan Pérez   |
    | 2   | 2   | Ana Gómez    |
    | 3   | 3   | Carlos Ruiz   |
    | NULL   | NULL   | NULL     |

14. Consulta todas las historias clínicas junto con el nombre del paciente.

    ```sql
    -- Consultar historias clinicas con nombres de pacientes
    SELECT pacientes.nombre, historias_clinicas.diagnostico FROM pacientes LEFT JOIN historias_clinicas ON pacientes.id = historias_clinicas.paciente_id;
    ```

    | Result   | Grid   | Filter Rows:   |
    | :------- | :----- | :------------- |
    | #   | nombre     | diagnostico   |
    | 1   | Juan Pérez | Hipertensión   |
    | 2   | Ana Gómez  | Diabetes     |
    | 3   | Carlos Ruiz | Asma         |

15. Muestra todos los pacientes que no tienen historia clínica registrada.

    ```sql
    -- Mostrar pacientes sin historia clínica
    SELECT * FROM pacientes WHERE id NOT IN (SELECT paciente_id FROM historias_clinicas);
    ```

    | Result   | Grid   | Filter Rows:   |
    | :------- | :----- | :------------- |
    | Edit:   | Export/Import:   | Wrap   |
    | #   | id   | nombre   |
    | NULL   | NULL   | NULL     |

16. Actualiza el diagnóstico de "Juan Pérez" a "Hipertensión crónica".

    ```sql
    -- Actualizar diagnóstico de Juan Pérez
    UPDATE historias_clinicas SET diagnostico = 'Hipertensión crónica' WHERE paciente_id = 1;
    ```

    | Result   | Grid   | Filter Rows   |
    | :------- | :----- | :------------- |
    | #   | paciente_id   | diagnostico         | fecha_registro   | tratamiento   |
    | 1   | Hipertensión crónica | 2025-03-12 19:13:21   | NULL   |
    | 2   | Diabetes           | 2025-03-12 19:13:21   | NULL   |
    | 3   | Asma               | 2025-03-12 19:13:21   | NULL   |
    | NULL   | NULL             | NULL               | NULL   |

17. Elimina la historia clínica de "Carlos Ruiz".
    ```sql
    -- Eliminar la historia clínica de Carlos Ruiz
    DELETE FROM historias_clinicas WHERE paciente_id = 3;
    ```
18. Consulta la estructura de la tabla historias\_clinicas.
    ```sql
    -- Consultar la estructura de historias_clinicas
    DESCRIBE TABLE historias_clinicas;
    ```
19. Elimina las tablas historias\_clinicas y pacientes.
    ```sql
    -- Eliminar tablas
    DROP TABLE historias_clinicas;
    DROP TABLE pacientes;
    ```

20. Elimina la base de datos hospital.
    ```sql
    -- Eliminar base de datos
    DROP DATABASE hospital;
    ```
